from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import Autostart


PREFERENCE_DESCRIPTION = """
Plugin to manage preferences. Automatically saves and
restores preference state. To use, add to manifest:

Extension:
    id = 'pref'
    point = 'inkcut.preferences.items'
    Preference:
        plugin_id = "plugin.id"
        attributes = ['attrs','to','observe','for','saving']

"""

PREFS_SAVE_DESCRIPTION = """
Save all models to the file system.
"""

PREFS_RESTORE_DESCRIPTION = """
Restore a model from the loaded preferences.
"""


def prefs_plugin_factory():
    from inkcut.workbench.preferences.plugin import PreferencePlugin
    return PreferencePlugin()


def save_preferences(event):
    plugin = event.workbench.get_plugin('inkcut.preferences')
    plugin.save()
    
def restore_preferences(event):
    plugin = event.workbench.get_plugin('inkcut.preferences')
    model = plugin._preferences[event.parameters['key']]
    event.parameters['model'].__setstate__(model.__getstate__())


enamldef PreferencesManifest(PluginManifest):
    """ Plugin for saving and restoring state / preferences. """
    
    id = 'inkcut.preferences'
    
    factory = prefs_plugin_factory
    
    ExtensionPoint:
        id = 'inkcut.preferences.items'
        description = PREFERENCE_DESCRIPTION
        
    Extension:
        id = 'autostart'
        point = 'enaml.workbench.ui.autostart'
        Autostart:
            plugin_id = 'inkcut.preferences'
            
    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'inkcut.preferences.save'
            description = PREFS_SAVE_DESCRIPTION
            handler = save_preferences
        Command:
            id = 'inkcut.preferences.restore'
            description = PREFS_RESTORE_DESCRIPTION
            handler = restore_preferences