
from atom.api import atomref,Unicode,Instance,List,Bool
from enaml.core.api import Conditional, Include
from enaml.image import Image
from enaml.layout.api import align, hbox, spacer
from enaml.stdlib.mapped_view import MappedView
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.task_dialog import (
    TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogDetailsArea, TaskDialogFootnoteArea,
    TaskDialogIconArea, TaskDialogInstructionArea, TaskDialogStyleSheet
)
from enaml.widgets.api import (
    CheckBox, Container, Dialog, Field, Label,
    ImageView, PushButton, RadioButton, Window,ProgressBar, Form,
    Notebook, Page, CheckBox, ObjectCombo
)
from inkcut.workbench.core.svg import QtSvgDoc
from inkcut.workbench.core.utils import load_icon, LoggingAtom
from inkcut.workbench.core.device import (
    DeviceDriver,DeviceProtocol,DeviceTransport
)
from inkcut.workbench.ui.widgets.double_spin_box import DoubleSpinBox

class DeviceConfiguration(LoggingAtom):
    #: List of registered devices
    devices = List()
    
    #: Current device manufacturer filter
    manufacturer = Unicode()
    
    #: Current device model filter
    model = Unicode()
    
    #: Driver to be used 
    driver = Instance(DeviceDriver)
    
    #: Show advanced settings
    show_advanced = Bool(False)
    
    #: Connection type to use
    connection_type = Unicode()
    
    #: Connection instance
    connection = Instance(DeviceTransport)
    
    #: Protocol ID to use
    protocol_id = Unicode()
    
    #: Protocol instance
    protocol = Instance(DeviceProtocol)
    
    def _observe_manufacturer(self,change):
        self.model = ""
        self.driver = None
    
    def _observe_model(self,change):
        if not self.devices:
            return
        drivers = [dev for dev in self.devices 
                        if dev.manufacturer==self.manufacturer and dev.model==self.model]
        self.driver = drivers[0] if drivers else None
        
    def _observe_connection_type(self,change):
        pass

enamldef DeviceDialog(Dialog):
    attr plugin
    attr device
    attr model = DeviceConfiguration()
    title << '{}{} - Setup'.format(model.manufacturer if model.manufacturer else "Device"," "+model.model if model.model else "")
    minimum_size = (540,360)
    TaskDialogBody:
        TaskDialogContentArea:
            padding = 8
            Notebook: notebook:
                tab_style = 'preferences'
                Page:
                    title = 'General'
                    closable = False
                    Form:
                        Label:
                            text = 'Manufacturer'
                        ObjectCombo:
                            items << sorted(set([dev.manufacturer for dev in plugin._devices]))
                            selected := model.manufacturer
                        Label:
                            text = 'Model'
                        ObjectCombo:
                            items << sorted(set([dev.model for dev in plugin._devices if dev.manufacturer==model.manufacturer]))
                            selected :: 
                                        model.devices = plugin._devices
                                        model.model = change['value']
                            selected << model.model
                                        
                        Conditional:
                            condition << model.driver is not None
                            Label:
                                text = 'Width'
                            Label:
                                text << model.driver.width if model.driver else ""

                            Conditional:
                                condition << bool(model.driver and model.driver.length)
                                Label:
                                    text = 'Length'
                                Label:
                                    text << str(model.driver.length) if model.driver else ''
                            CheckBox:
                                text << "Show advanced settings"
                                checked := model.show_advanced
                Conditional:
                    condition<< model.driver is not None    
                    Page:
                        title = 'Connection'
                        closable = False
                        Form:
                            Label:
                                text = 'Type'
                            ObjectCombo:
                                items << model.driver.connections if model.driver else []
                                selected := model.connection_type
                            
                        Conditional:
                            condition << bool(model.connection_type)
                            Label:
                                text << "Selected {}".format(model.connection_type)
                            MappedView:
                                model << model.connection
                                typemap << {type(model.connection):model.connection.view_factory()}
                    Page:
                        title = 'Calibration'
                        closable = False
                    Conditional:
                        condition << model.show_advanced
                        Page:
                            title = 'Advanced'
                            closable = False
                            
                            Form:
                                Label:
                                    text = 'Protocol'
                                
                                ObjectCombo:
                                    items << model.driver.protocols
                                    selected := model.protocol_id
                            
            
        TaskDialogCommandArea:
            constraints = [
                hbox(spacer, bbox),
            ]
        
            DialogButtonBox: bbox:
                buttons = [
                    DialogButton('OK', 'accept'),
                    DialogButton('Cancel', 'reject'),
                ]
            

    