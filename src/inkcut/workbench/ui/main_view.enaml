import traceback
from enaml.widgets.api import (
    Container, Notebook, Page, Label, ImageView, StatusItem, 
    SpinBox, CheckBox, PushButton, RadioButton, Form, ComboBox,
    Menu, Action, ObjectCombo
)
from enaml.core.include import Include
from enaml.layout.api import hbox,vbox,spacer,align
from enaml.workbench.api import Extension, PluginManifest
from inkcut.workbench.core.utils import load_icon, load_image
from inkcut.workbench.ui.widgets.api import PlotView,DoubleSpinBox
from inkcut.workbench.core.svg import QtSvgDoc
from inkcut.workbench.ui.task_dialog import JobTaskDialog



enamldef HeaderLabel(Label):
    pass

enamldef MainView(Container):
    attr model
    attr job << model.job
    
    constraints = [
        vbox(toolbar,
             hbox(notebook,plot)
        )
    ]
    Container: toolbar:
        padding = 0
        constraints = [
             hbox(devlbl,devcmb,medlbl,medcmb,spacer),
             align('v_center',devlbl,devcmb,medlbl,medcmb),
        ]    
        Label: devlbl:
            text = "Device"
        ObjectCombo: devcmb:
            items << [d for d in model.available_devices]
            selected := model.device
            to_string = lambda it:"{}".format(it.name)
        Label: medlbl:
            text = "Media"
        ObjectCombo: medcmb:
            items << [m for m in model.available_media]
            selected := model.media
            to_string = lambda it,model=model:"{} {} {}".format(it.name,QtSvgDoc.convertToUnit(it.size[0], model.units),model.units)

    
    Notebook: notebook:
        tab_style = 'preferences'
        
        Page:
            title = 'General'
            closable = False
            #minimum_size = (240,570)
            Container:
                Container:
                    padding = 0
                    HeaderLabel:
                        text = "Graphic Size"
                    Form:
                        padding = 0
                        ImageView:
                            image = load_image('text_letterspacing')
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.size[0], model.units)
                            value ::
                                    #print("callback",change)
                                    v = QtSvgDoc.convertToUnit(job.size[0], model.units)
                                    changed = v != change['value']
                                    if changed and change['oldvalue']>0 and change['value']>0:
                                        s = job.scale[0] * change['value']/change['oldvalue']
                                        if job.lock_scale:
                                            job.scale = [s,s]
                                        else:
                                            job.scale[0] = s
                                            
                            suffix << " "+model.units
                            minimum = 0.00001
                            maximum = 99999.9
                        ImageView:
                            image = load_image('text_linespacing')
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.size[1], model.units)
                            value ::
                                    #print("callback",change)
                                    v = QtSvgDoc.convertToUnit(job.size[1], model.units)
                                    changed = v != change['value']
                                    if changed and change['oldvalue']>0 and change['value']>0:
                                        s = job.scale[1] * change['value']/change['oldvalue']
                                        if job.lock_scale:
                                            job.scale = [s,s]
                                        else:
                                            job.scale[1] = s
                            suffix << " "+model.units
                            minimum = 0.00001
                            maximum = 99999.9
                        ImageView:
                            image << load_image(job.lock_scale and 'text_kerning' or 'text_letterspacing')
                        DoubleSpinBox:
                            value << 100*job.scale[0]
                            value ::
                                    s = change['value']/100.0  
                                    if job.lock_scale:
                                        job.scale = [s,s]
                                    else:
                                        job.scale[0] = s
                                        
                            suffix = ' %'
                            minimum = 0.00001
                            maximum = 99999.9
                        ImageView:
                            visible << not job.lock_scale
                            image = load_image('text_linespacing')
                        DoubleSpinBox:
                            visible << not job.lock_scale
                            value << 100*job.scale[1]
                            value ::
                                    s = change['value']/100.0  
                                    if job.lock_scale:
                                        job.scale = [s,s]
                                    else:
                                        job.scale[1] = s
                            suffix = ' %'
                            minimum = 0.00001
                            maximum = 99999.9
                    CheckBox: 
                        text = 'Lock aspect ratio'
                        checked := job.lock_scale
                    #CheckBox: 
                    #    text = 'Scale to fit'
                    #    checked := job.auto_scale
                Container:
                    constraints = [
                        vbox(hdr,
                             form,
                             hbox(pb1,pb2,cb1,spacer)),
                        align('v_center',pb1,pb2,cb1)
                    ]
                    padding = 0
                    HeaderLabel: hdr:
                        text = "Graphic Copies"
                    Form: form:
                        padding = 0
                        ImageView:
                            image = load_image('shape_copy')
                        SpinBox:
                            value := job.copies
                            minimum = 1
                            maximum = 99999
                            suffix << job.auto_copies and "   (minimum set to %s)"%job._desired_copies or ""
                    PushButton: pb1:
                        icon = load_icon('shape_square_add')
                        clicked :: job.add_stack() 
                    PushButton: pb2:
                        icon = load_icon('shape_square_delete')
                        clicked :: job.remove_stack()
                    CheckBox: cb1:
                        text = 'Fill to save space'
                        checked := job.auto_copies
            
                Container:
                    padding = 0
                    HeaderLabel:
                        text = "Graphic Rotation"
                    Form:
                        padding = 0
                        ImageView:
                            image = load_image('shape_rotate_clockwise')
                        DoubleSpinBox:
                            value := job.rotation
                            suffix = " Â°"
                            maximum = 180
                            minimum = -180
                            wrapping = True
                            single_step = 15
                    CheckBox:
                        text = 'Rotate to save space'
                        checked := job.auto_rotate
                Container:
                    padding = 0
                    
                    HeaderLabel:
                        text = "Graphic Mirroring"
                    CheckBox:
                        text = 'Mirror about x-axis'
                        icon = load_icon('shape_flip_vertical')
                        checked := job.mirror[0]
                    CheckBox:
                        text = 'Mirror about y-axis'
                        icon = load_icon('shape_flip_horizontal')
                        checked := job.mirror[1]
        Page:
            title = 'Placement'
            closable = False
            
            Container:
                Container:
                    padding = 0
                    
                    HeaderLabel:
                        text = "Graphic Spacing"
                    Form:
                        padding = 0
                        Label:
                            text = "Row"
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.copy_spacing[0], model.units)
                            value :: job.copy_spacing[0] = QtSvgDoc.convertFromUnit(change['value'],model.units)
                            suffix << " "+model.units
                            maximum = 99999.9
                            single_step = 0.1
                        Label:
                            text = "Col"
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.copy_spacing[1], model.units)
                            value :: job.copy_spacing[1] = QtSvgDoc.convertFromUnit(change['value'],model.units)
                            suffix << " "+model.units
                            maximum = 99999.9
                            single_step = 0.1
                
                Container:
                    padding = 0
                    
                    HeaderLabel:
                        text = "Plotting Order"
                    Form:
                        padding = 0
                        ImageView:
                            image = load_image('chart_line')
                        ComboBox:
                            items = list(job.__class__.order.items)
                            index << job.__class__.order.items.index(job.order)
                            index :: job.order = job.__class__.order.items[change['value']]
                            hug_width = 'ignore' # Expanding
                Container:
                    padding = 0
                    
                    HeaderLabel:
                        text = "Plot Weedlines"
                    CheckBox:
                        text = 'Add weedline to plot'
                        icon = load_icon('shape_group')
                        checked := job.plot_weedline
                    CheckBox:
                        text = 'Add weedline to copies'
                        icon = load_icon('shape_ungroup')
                        checked := job.copy_weedline
                Container:
                    padding = 0
                    
                    HeaderLabel:
                        text = "Weedline Padding"
                    Form:
                        padding = 0
                        ImageView:
                            image = load_image('text_padding_left')
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.copy_weedline_padding[0], model.units)
                            value :: job.copy_weedline_padding[0] = QtSvgDoc.convertFromUnit(change['value'],model.units)
                            suffix << " "+model.units
                            maximum = 99999.9
                            single_step = 0.1
                        ImageView:
                            image = load_image('text_padding_top')
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.copy_weedline_padding[1], model.units)
                            value :: job.copy_weedline_padding[1] = QtSvgDoc.convertFromUnit(change['value'],model.units)
                            suffix << " "+model.units
                            maximum = 99999.9
                            single_step = 0.1
                        ImageView:
                            image = load_image('text_padding_right')
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.copy_weedline_padding[2], model.units)
                            value :: job.copy_weedline_padding[2] = QtSvgDoc.convertFromUnit(change['value'],model.units)
                            suffix << " "+model.units
                            maximum = 99999.9
                            single_step = 0.1
                        ImageView:
                            image = load_image('text_padding_bottom')
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.copy_weedline_padding[3], model.units)
                            value :: job.copy_weedline_padding[3] = QtSvgDoc.convertFromUnit(change['value'],model.units)
                            suffix << " "+model.units
                            maximum = 99999.9
                            single_step = 0.1

        Page:
            title = 'Area'
            closable = False
            
            Container:
                Container:
                    padding = 0
                    
                    HeaderLabel:
                        text = "Plot Area"
                    Form:
                        padding = 0
                        ImageView:
                            image = load_image('shape_square_width')
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.media.size[0], model.units)
                            value :: job.media.size[0] = QtSvgDoc.convertFromUnit(change['value'],model.units)
                            suffix << " "+model.units
                            maximum = 99999.9
                            #maximum << QtSvgDoc.convertToUnit(job.media.size[0], model.units)
                            #single_step = 0.1
                        ImageView:
                            image = load_image('shape_square_height')
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.media.size[1], model.units)
                            value :: job.media.size[1] = QtSvgDoc.convertFromUnit(change['value'],model.units)
                            suffix << " "+model.units
                            maximum = 99999.9
                            #maximum << QtSvgDoc.convertToUnit(job.media.size[1], model.units)
                            #single_step = 0.1
                        Label:
                            text = ""
                        PushButton:
                            text = "Read from device"
                            tool_tip = "Get the media size by querying the device."
                Container:
                    padding = 0
                    
                    HeaderLabel:
                        text = "Plot Margins"
                    Form:
                        padding = 0
                        ImageView:
                            image = load_image('text_padding_left')
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.media.padding[0], model.units)
                            value :: job.media.padding[0] = QtSvgDoc.convertFromUnit(change['value'],model.units)
                            suffix << " "+model.units
                            maximum = 99999.9
                            single_step = 0.1
                        ImageView:
                            image = load_image('text_padding_top')
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.media.padding[1], model.units)
                            value :: job.media.padding[1] = QtSvgDoc.convertFromUnit(change['value'],model.units)
                            suffix << " "+model.units
                            maximum = 99999.9
                            single_step = 0.1
                        ImageView:
                            image = load_image('text_padding_right')
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.media.padding[2], model.units)
                            value :: job.media.padding[2] = QtSvgDoc.convertFromUnit(change['value'],model.units)
                            suffix << " "+model.units
                            maximum = 99999.9
                            single_step = 0.1
                        ImageView:
                            image = load_image('text_padding_bottom')
                        DoubleSpinBox:
                            value << QtSvgDoc.convertToUnit(job.media.padding[3], model.units)
                            value :: job.media.padding[3] = QtSvgDoc.convertFromUnit(change['value'],model.units)
                            suffix << " "+model.units
                            maximum = 99999.9
                            single_step = 0.1    
                Container:
                    padding = 0
                    
                    HeaderLabel:
                        text = "Plot Alignment"
                    CheckBox:
                        text = 'Align center horizontally'
                        icon = load_icon('shape_align_center')
                        checked := job.align_center[0]
                    CheckBox:
                        text = 'Align center vertically'
                        icon = load_icon('shape_align_middle')
                        checked := job.align_center[1]
                
                Container:
                    padding = 0
                    constraints = [
                        vbox(lbl,
                             rb1,
                             hbox(rb2,dsb)),
                        align('v_center',rb2,dsb)
                    ]
                    HeaderLabel: lbl:
                        text = "Plot Feeding"
                    RadioButton: rb1:
                        text = 'Return to origin'
                        #checked := job.feed_to_end
                    RadioButton: rb2:
                        text = 'Feed after'
                        checked := job.feed_to_end
                    DoubleSpinBox: dsb:
                        value << QtSvgDoc.convertToUnit(job.feed_after, model.units)
                        value :: job.feed_after = QtSvgDoc.convertFromUnit(change['value'],model.units)
                        suffix << " "+model.units
                        maximum = 99999.9
                        single_step = 0.1
        Include:
            objects << filter(None,model.pages)
            
    PlotView: plot:
        minimum_size = (360,None)
        data := model.plot
        axis_scales << {'left':QtSvgDoc.convertToUnit(1, model.units),'bottom':QtSvgDoc.convertToUnit(1, model.units)}
        Menu:
            context_menu = True
            Action:
                text = 'View all'
                triggered :: plot.proxy.widget.autoRange()
    #StatusItem:
    #    Label:
    #       text << model.status
    #StatusItem:
    #    Label:
    #        text << "%0.3f %s x %0.3f %s"%(job.model.boundingBox().width(),job.model.boundingBox().width(),model.units,model.units)
