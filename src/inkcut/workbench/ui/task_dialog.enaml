from atom.api import atomref
from enaml.image import Image
from enaml.layout.api import align, hbox, spacer
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.task_dialog import (TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogDetailsArea, TaskDialogFootnoteArea,
    TaskDialogIconArea, TaskDialogInstructionArea, TaskDialogStyleSheet)
from enaml.widgets.api import (CheckBox, Container, Dialog, Field, Label,
    ImageView, PushButton, RadioButton, Window,ProgressBar)
from inkcut.workbench.ui.widgets.plot_view import PlotView
from inkcut.workbench.core.svg import QtSvgDoc
from inkcut.workbench.core.utils import load_icon


def install_qt_dialog_hack():
    # Hack the QDialog
    from enaml.qt.qt_dialog import QWindowDialog
    from enaml.qt.q_window_base import QWindowLayout,QLayout,QSize,Qt

    def __init__(self, proxy, parent=None, flags=Qt.Widget):
        """ Initialize a QWindowDialog.
    
        Parameters
        ----------
        proxy : QtDialog
            The proxy object which owns this dialog. Only an atomref
            will be maintained to this object.
    
        parent : QWidget, optional
            The parent of the dialog.
    
        flags : Qt.WindowFlags, optional
            The window flags to pass to the parent constructor.
    
        """
        super(QWindowDialog, self).__init__(parent, flags)
        self._proxy_ref = atomref(proxy)
        
        # Hack for PySide
        if not self.layout():
            self._expl_min_size = QSize()
            self._expl_max_size = QSize()
            layout = QWindowLayout()
            layout.setSizeConstraint(QLayout.SetMinAndMaxSize)
            self.setLayout(layout)
            
    QWindowDialog.__init__ = __init__


enamldef JobTaskDialog(Dialog):
    title = 'Live Plot'
    attr model
    TaskDialogStyleSheet:
            pass
    TaskDialogBody:
        TaskDialogContentArea:
            padding = 0
            PlotView:
                minimum_size = (540,320)
                data := model.plot
                axis_scales << {'left':QtSvgDoc.convertToUnit(1, model.units),'bottom':QtSvgDoc.convertToUnit(1, model.units)}
            ProgressBar:
                value << model.progress
        
        TaskDialogCommandArea:
            constraints = [
                hbox(lbl, spacer, pb1,pb2),
                align('v_center', lbl, pb1,pb2),
            ]
            Label: lbl:
                text << 'Position (x=%0.3f x y=%0.3f z=%s)'%(model.job.device.position[0],model.job.device.position[1],model.job.device.position[2] and 'down' or 'up')
                #checked := details.visible
            PushButton: pb1:
                visible << model.running
                icon = load_icon('control_stop')
                clicked :: model.cancelled = True
            PushButton: pb2:
                icon << load_icon((not model.running or model.paused) and 'control_play' or 'control_pause')
                clicked :: 
                            if model.running:
                                model.paused = not model.paused
                            else:
                                model.start_plot()
            
            #DialogButtonBox: bbox:
            #    buttons = [
            #        DialogButton('OK', 'accept'),
            #        DialogButton('Cancel', 'reject'),
            #    ]


#enamldef Main(Window):
#    title = 'T'
#    Container:
#        PushButton:
#            text = 'Launch Dialog'
#            clicked :: JobTaskDialog(self).exec_()
            
install_qt_dialog_hack()
