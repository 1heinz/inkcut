from atom.api import atomref
from enaml.image import Image
from enaml.layout.api import align, hbox, vbox,spacer
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.task_dialog import (TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogDetailsArea, TaskDialogFootnoteArea,
    TaskDialogIconArea, TaskDialogInstructionArea, TaskDialogStyleSheet)
from enaml.widgets.api import (CheckBox, Container, Dialog, Field, Label,
    ImageView, PushButton, RadioButton, Window,ProgressBar)
from inkcut.workbench.ui.widgets.api import PlotView,KeyEvent
from inkcut.workbench.core.svg import QtSvgDoc
from inkcut.workbench.core.utils import load_icon
from enaml.qt import QtGui, QtCore
from enaml.widgets.spin_box import SpinBox

enamldef JoystickDialog(Dialog):
    title = 'Plotter Control'
    attr model
    
    
    KeyEvent:
        key_code = QtCore.Qt.Key.Key_Up
        pressed :: model.move_up()
        
    KeyEvent:
        key_code = QtCore.Qt.Key.Key_Left
        pressed :: model.move_left()
        
    KeyEvent:
        key_code = QtCore.Qt.Key.Key_Right
        pressed :: model.move_right()
    
    KeyEvent:
        key_code = QtCore.Qt.Key.Key_Down
        pressed :: model.move_down()
    
    TaskDialogStyleSheet:
            pass
    TaskDialogBody:
        TaskDialogContentArea:
            padding = 0
            PlotView:
                minimum_size = (540,320)
                data := model.plot
                axis_scales << {'left':QtSvgDoc.convertToUnit(1, model.units),'bottom':QtSvgDoc.convertToUnit(1, model.units)}
        
        TaskDialogCommandArea:
            constraints = [
                hbox(vbox(hbox(lbl2,spb1),
                          lbl1,),spacer,vbox(hbox(lbl3,spb2),
                                             hbox(lbl4,spb3),),  vbox(hbox(pb5,pb1,pb6),
                                                         hbox(pb2,pb3,pb4))),
                align('v_center', lbl2, spb1),
                align('v_center', lbl3, spb2),
                align('v_center', lbl4, spb3),
            ]
            Label: lbl1:
                text << 'Position (x=%0.3f x y=%0.3f z=%s)'%(model.device.position[0],model.device.position[1],model.device.position[2] and 'down' or 'up')
            Label: lbl2:
                text = 'Step'
            SpinBox: spb1:
                maximum = 10000
                single_step = 10
                value := model.rate
            
            Label: lbl3:
                text = 'Speed'
            SpinBox: spb2:
                maximum = 10000
                single_step = 4
                value := model.device.speed
            
            Label: lbl4:
                text = 'Force'
            SpinBox: spb3:
                maximum = 10000
                single_step = 10
                value := model.device.force
            
            
            PushButton: pb5:
                clicked :: model.set_origin()
                icon = load_icon('arrow_in')
                tool_tip = 'set origin'
            PushButton: pb1:
                clicked :: model.move_up()
                icon = load_icon('arrow_up')
                tool_tip = 'move up'
            PushButton: pb6:
                clicked :: model.move_to_origin()
                icon = load_icon('arrow_undo')
                tool_tip = 'return to origin'
            
            PushButton: pb2:
                clicked :: model.move_left()
                icon = load_icon('arrow_left')
                tool_tip = 'move left'
            PushButton: pb3:
                clicked :: model.move_down()
                icon = load_icon('arrow_down')
                tool_tip = 'move down'
            PushButton: pb4:
                clicked :: model.move_right()
                icon = load_icon('arrow_right')
                tool_tip = 'move right' 
            
            #DialogButtonBox: bbox:
            #    buttons = [
            #        DialogButton('OK', 'accept'),
            #        DialogButton('Cancel', 'reject'),
            #    ]


#enamldef Main(Window):
#    title = 'T'
#    Container:
#        PushButton:
#            text = 'Launch Dialog'
#            clicked :: JobTaskDialog(self).exec_()
            
