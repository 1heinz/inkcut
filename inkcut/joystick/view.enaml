"""
Created on Jul 19, 2015

@author: jrm
"""
from enaml.layout.api import align, hbox, vbox,spacer
from enaml.stdlib.task_dialog import (TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogDetailsArea, TaskDialogFootnoteArea,
    TaskDialogIconArea, TaskDialogInstructionArea, TaskDialogStyleSheet)
from enaml.widgets.api import (CheckBox, Container, Dialog, Field, Label,
    ImageView, PushButton, RadioButton, Window,ProgressBar)

from enaml.widgets.spin_box import SpinBox
from enamlx.widgets.api import KeyEvent
from inkcut.preview.plot_view import PlotView
from inkcut.core.api import DockItem, to_unit
from inkcut.core.utils import load_icon

enamldef JoystickDockItem(DockItem):
    title = 'Control'
    attr model
    attr device << model.device

            # PlotView:
            #     minimum_size = (540,320)
            #     data := model.plot
            #     axis_scales << {'left':to_unit(1, model.units),'bottom':to_unit(1, model.units)}
        
    Container:
        constraints = [
            hbox(
                vbox(lbl0,
                     hbox(lbl2, spb1),
                     lbl1),
                spacer,
                directions,
                spacer,
                vbox(hbox(lbl3, spb2),
                     hbox(lbl4, spb3)),

            ),
            align('v_center', lbl2, spb1),
            align('v_center', lbl3, spb2),
            align('v_center', lbl4, spb3),
        ]
        Label: lbl0:
            text << "{} @ {} ({})".format(
                device.declaration.id,
                device.connection if device.connection else "",
                device.connection.protocol.declaration.name if device.connection and device.connection.protocol else ""
            )
        Label: lbl1:
            text << 'Position (x=%0.3f x y=%0.3f z=%s)'%(
                        device.position[0],
                        device.position[1],
                        device.position[2] and 'down' or 'up')
        Label: lbl2:
            text = 'Step'
        SpinBox: spb1:
            maximum = 10000
            single_step = 10
            value := model.rate

        Label: lbl3:
            text = 'Speed'
        SpinBox: spb2:
            maximum = 10000
            single_step = 4
            #value := device.speed

        Label: lbl4:
            text = 'Force'
        SpinBox: spb3:
            maximum = 10000
            single_step = 10
            #value := device.force
        Container: directions:
            constraints = [
                vbox(hbox(pb5, pb1, pb6),
                     hbox(pb2, pb3, pb4))
            ]
            PushButton: pb5:
                clicked :: model.set_origin()
                icon = load_icon('arrow_in')
                tool_tip = 'set origin'
            PushButton: pb1:
                clicked :: model.move_up()
                icon = load_icon('arrow_up')
                tool_tip = 'move up'
            PushButton: pb6:
                clicked :: model.move_to_origin()
                icon = load_icon('arrow_undo')
                tool_tip = 'return to origin'
            PushButton: pb2:
                clicked :: model.move_left()
                icon = load_icon('arrow_left')
                tool_tip = 'move left'
            PushButton: pb3:
                clicked :: model.move_down()
                icon = load_icon('arrow_down')
                tool_tip = 'move down'
            PushButton: pb4:
                clicked :: model.move_right()
                icon = load_icon('arrow_right')
                tool_tip = 'move right'
            

