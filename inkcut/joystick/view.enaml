"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Jul 19, 2015

@author: jrm
"""
from enaml.layout.api import align, hbox, vbox,spacer
from enaml.stdlib.task_dialog import (TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogDetailsArea, TaskDialogFootnoteArea,
    TaskDialogIconArea, TaskDialogInstructionArea, TaskDialogStyleSheet)
from enaml.widgets.api import (CheckBox, Container, Dialog, Field, Label,
    ImageView, PushButton, RadioButton, Window,ProgressBar)

from enaml.widgets.spin_box import SpinBox
from enamlx.widgets.api import KeyEvent
from inkcut.core.api import DockItem, to_unit
from inkcut.core.utils import load_icon

enamldef JoystickDockItem(DockItem):
    title = 'Control'
    name = 'joystick-item'
    attr plugin
    attr device << plugin.device
    icon = load_icon('controller')
            # PlotView:
            #     minimum_size = (540,320)
            #     data := plugin.plot
            #     axis_scales << {'left':to_unit(1, plugin.units),'bottom':to_unit(1, plugin.units)}
    Container:
        constraints = [
            hbox(
                vbox(lbl0,
                     hbox(lbl2, spb1),
                     lbl1),
                spacer,
                controls,
                head,
                directions,
                spacer,
                vbox(hbox(lbl3, spb2),
                     hbox(lbl4, spb3)),

            ),
            align('v_center', lbl2, spb1),
            align('v_center', lbl3, spb2),
            align('v_center', lbl4, spb3),
        ]
        KeyEvent:
            pressed ::
                print(change['value'])
        Label: lbl0:
            text << "{} @ {} ({})".format(
                device.declaration.id,
                device.connection if device.connection else "",
                device.connection.protocol.declaration.name if device.connection and device.connection.protocol else ""
            )
        Label: lbl1:
            text << 'Position (x=%0.3f x y=%0.3f z=%s)'%(
                        device.position[0],
                        device.position[1],
                        device.position[2] and 'down' or 'up')
        Label: lbl2:
            text = 'Step'
        SpinBox: spb1:
            maximum = 10000
            single_step = 10
            value := plugin.rate

        Label: lbl3:
            text = 'Speed'
        SpinBox: spb2:
            maximum = 10000
            single_step = 4
            #value := device.speed

        Label: lbl4:
            text = 'Force'
        SpinBox: spb3:
            maximum = 10000
            single_step = 10
            #value := device.force
        Container: controls:
            PushButton:
                icon = load_icon('arrow_refresh')
                clicked :: plugin.reconnect()
                tool_tip = "Reconnect to device"
            PushButton:
                icon << load_icon('disconnect' if device.connection.connected else 'connect')
                clicked ::
                        if device.connection.connected:
                            device.disconnect()
                        else:
                            device.connect()
        Container: head:
            PushButton:
                icon = load_icon("bullet_toggle_plus")
                clicked :: device.position[-1] = 1
            PushButton:
                icon = load_icon("bullet_toggle_minus")
                clicked :: device.position[-1] = 0
        Container: directions:
            constraints = [
                vbox(hbox(pb5, pb1, pb6),
                     hbox(pb2, pb3, pb4))
            ]
            PushButton: pb5:
                clicked :: plugin.set_origin()
                icon = load_icon('arrow_in')
                tool_tip = 'set origin'
            PushButton: pb1:
                clicked :: plugin.move_up()
                icon = load_icon('arrow_up')
                tool_tip = 'move up'
            PushButton: pb6:
                clicked :: plugin.move_to_origin()
                icon = load_icon('arrow_undo')
                tool_tip = 'return to origin'
            PushButton: pb2:
                clicked :: plugin.move_left()
                icon = load_icon('arrow_left')
                tool_tip = 'move left'
            PushButton: pb3:
                clicked :: plugin.move_down()
                icon = load_icon('arrow_down')
                tool_tip = 'move down'
            PushButton: pb4:
                clicked :: plugin.move_right()
                icon = load_icon('arrow_right')
                tool_tip = 'move right'
            

