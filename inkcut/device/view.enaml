# -*- coding: utf-8 -*-
"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Dec 7, 2017

@author: jrm
"""
import os
import textwrap
from enaml.layout.api import hbox, vbox, spacer, align
from enaml.widgets.api import (
    Form, CheckBox, Container, Label, ProgressBar, PushButton, Notebook, Page, ObjectCombo
)
from enamlx.widgets.api import DoubleSpinBox
from inkcut.core.api import Model, DockItem
from inkcut.core.utils import to_unit, load_icon
from inkcut.preview.plot_view import PlotView
from .plugin import DeviceConfig

enamldef ConfigView(Container):
    attr model: Model
    Label:
        text = "No configuration available."

enamldef DeviceConfigView(Container):
    attr model: DeviceConfig
    Notebook:
        tab_style = 'document'
        tab_position = 'left'
        Page:
            closable = False
            title = "Settings"
            Form:
                Label:
                    text = "Speed"
                DoubleSpinBox:
                    minimum = 0
                    value:= model.speed
                    single_step = 4
                    suffix << " {}".format(model.speed_units)
                Label:
                    text = ""
                CheckBox:
                    text = "Enabled"
                    checked := model.speed_enabled
                Label:
                    text = "Force"
                DoubleSpinBox:
                    minimum = 0
                    value:= model.force
                    single_step = 10
                    suffix << " {}".format(model.force_units)
                Label:
                    text = ""
                CheckBox:
                    text = "Enabled"
                    checked := model.force_enabled
        Page:
            closable = False
            title = "Output"
            Form:
                Label:
                    text = "Rotation"
                ObjectCombo:
                    items = list(model.get_member('rotation').items)
                    selected := model.rotation
                    tool_tip = textwrap.dedent("""
                    Final output rotation.
                    """).strip()
                Label:
                    text = "Scale"
                Form:
                    Label:
                        text = "x"
                    DoubleSpinBox:
                        value := model.scale[0]
                        minimum = -9999.9
                        maximum = 9999.9
                        tool_tip = textwrap.dedent("""
                        Final output scale for the x-axis.
                        """).strip()
                    Label:
                        text = "y"
                    DoubleSpinBox:
                        value := model.scale[1]
                        minimum = -9999.9
                        maximum = 9999.9
                        tool_tip = textwrap.dedent("""
                            Final output scale for the y-axis.
                            """).strip()

        Page:
            closable = False
            title = "Advanced"
            Form:
                Label:
                    text = "Interpolate paths"
                    tool_tip = textwrap.dedent("""
                    If enabled this will break down the commands into
                    smaller steps. This enables you to pause mid job for devices using streamed
                    connections or motor control. It is not recommended for spooled (printer)
                    devices.
                    """).strip()
                CheckBox:
                    checked := model.interpolate
                Label:
                    text = "Step size"
                    tool_tip = textwrap.dedent("""
                    Sets the step size to use when interpolation is enabled.
                    """).strip()
                DoubleSpinBox:
                    enabled << model.interpolate
                    value << to_unit(model.step_size, 'mm')
                    value :: model.step_size = from_unit(change['value'],'mm')
                    suffix << " "+'mm'
                    minimum = 0.00001
                    maximum = 99999.9
                Label:
                    text = "Step time"
                    tool_tip = textwrap.dedent("""
                    Sets the time to wait before sending the next command when interpolation
                    is used.
                    """).strip()
                DoubleSpinBox:
                    enabled << model.interpolate
                    value := model.step_time
                    suffix << " ms"
                    minimum = 0
                    maximum = 1000



enamldef DeviceProgressDockItem(DockItem):
    title = "Live"
    name = "device-progress-item"
    icon = load_icon('printer')
    attr plugin
    attr preview << plugin.workbench.get_plugin('inkcut.preview').live_preview
    attr job_plugin << plugin.workbench.get_plugin('inkcut.job')
    attr device << plugin.device
    attr job << device.job
    Container:
        padding = 0
        PlotView: plot:
            minimum_size = (540,320)
            data := preview.plot
            axis_scales << {
                'left': to_unit(1, preview.units),
                'bottom': to_unit(1, preview.units)
            }
        Container:
            constraints = [
                vbox(
                    hbox(lbl1, lbl2, lbl3, spacer),
                    hbox(prog, pb1,pb2)),
                align('v_center', prog, pb1,pb2),
                align('v_center', lbl1, lbl2, lbl3)
            ]

            Label: lbl1:
                text << "Job: {}".format(os.path.split(job.document)[-1] if job else "")
            Label: lbl2:
                text << "Started: {}".format(job.info.started.strftime('%c') if job else "")
            Label: lbl3:
                text << "Eta: {} {}".format(
                            (job.info.started + job.info.eta).strftime('%c') if (
                                job and job.info.started and job.info.eta) else "",
                            "({} min)".format(int(job.info.eta.total_seconds()/60)) if (job and
                                    job.info.eta) else "",
                        )
            # Label: lbl:
            # text << 'Position (x=%0.3f x y=%0.3f z=%s)'%(
            #     device.position[0],
            #     device.position[1],
            #     device.position[2] and 'down' or 'up')
            ProgressBar: prog:
                value << int(job.info.progress) if job else 0
                text_visible = True
            PushButton: pb1:
                visible << device.busy
                text = "Abort"
                tool_tip = "Abort the current job"
                icon = load_icon('control_stop')
                clicked :: job.info.cancelled = True
            PushButton: pb2:
                text << "Resume" if (job and job.info.paused and not job.info.cancelled) else (
                    "Pause" if device.busy else "Start"
                )
                icon << load_icon('control_play' if ((job and job.info.paused)
                                    or not device.busy)
                                  else 'control_pause')
                clicked ::
                    if device.busy:
                        job.info.paused = not job.info.paused
                    elif job_plugin and job_plugin.job.document:
                        core = plugin.workbench.get_plugin("enaml.workbench.core")
                        core.invoke_command('inkcut.device.submit',
                                            parameters={'job': job_plugin.job})